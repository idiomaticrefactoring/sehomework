/**类名_方法名(_形参类型)
   *@author: MF1933016+dingzhu
   *@className: Arrays_prefix_int$Arrays_suffix_int
   *@apiSignature: Arrays$func prefix(upTo end: Int) -> ArraySlice<Element>;func suffix(_ maxLength: Int) -> ArraySlice<Element>;NSArray$convenience init(array: [Any], copyItems flag: Bool)
   *@description: Test swift api Arrays$func prefix(upTo end: Int);func suffix(_ maxLength: Int);convenience init(array: [Any], copyItems flag: Bool)
   *@Map: java.lang.Arrays$public static int[] copyOfRange (int[] original, int from, int to)
*/
import Foundation

class Arrays_prefix_int$Arrays_suffix_int{
     /**
     * input: 3
     * class0 class0=[1,2,3,4,5]
     * int x=3
     * int y=3
     * output: 2
     * ret0  a=[1,2,3]
     * ret1  b=[1,2,3]
     */
     static func prefix_suffix0(){
        var class0=[1,2,3,4,5];
        var x=3;
        var y=3;
        var a=class0.prefix(upTo:x);
        var b=a.suffix(y);
        for (int i = 0; i <3; i++) {
           assert(a[i]==i+1);
           assert(b[i]==i+1}
        for (int i = 0; i <3; i++) {
           print(b[i]);}
  /**
     * input: 3
     * class0 class0=[1,2,3,4,5]
     * int x=3
     * int y=3
     * output: 2
     * ret0  a=[1,2,3]
     * ret1  b=[2,3]
     */
     static func prefix_suffix0(){
        var class0=[1,2,3,4,5];
        var x=3;
        var y=2;
        var a=class0.prefix(upTo:x);
        var b=a.suffix(y);
        for (int i = 0; i <3; i++) {
           assert(a[i]==i+1);
           }
        for (int i = 1; i <3; i++) {
           assert(b[i]==i+1;
           print(b[i]);}
}
Arrays_prefix_int$Arrays_suffix_int.prefix_suffix0()
Arrays_prefix_int$Arrays_suffix_int.prefix_suffix1()
