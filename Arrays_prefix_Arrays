/**类名_方法名(_形参类型)
   *@author: MF1933016+dingzhu
   *@className: Arrays_prefix_Arrays
   *@apiSignature: Arrays$func prefix(upTo end: Int) -> ArraySlice<Element>;func suffix(_ maxLength: Int) -> ArraySlice<Element>;NSArray$convenience init(array: [Any], copyItems flag: Bool)
   *@description: Test swift api Arrays$func prefix(upTo end: Int);func suffix(_ maxLength: Int);convenience init(array: [Any], copyItems flag: Bool)
   *@Map: java.lang.Arrays$public static int[] copyOfRange (int[] original, int from, int to)
*/
import Foundation

class Arrays_prefix_Arrays$Arrays_suffix_Arrays$convenience init{
     /**
     * input: 3
     * class0 class0=[1,2,3,4,5]
     * int int0=3
     * int int1=3
     * output: 3
     * ret0  ret0=[1,2,3]
     * ret1  ret1=[1,2,3]
     * ret2  ret2=[1,2,3]
     */
     static func prefix_suffix_init0(){
        var class0=[1,2,3,4,5];
        var int0=3;
        var int1=3;
        var ret0=class0.prefix(upTo:int0);
        var ret1=ret0.sufix(int1);
        NSarray ret2=init[ret1,copyItems Yes]
        assert (class0==[1,2,3,4,5]);
        assert (ret0==[1,2,3]);
        assert (ret1==[1,2,3]);
        assert (ret2==[1,2,3]);
        print(ret2);
  /**
     * input: 3
     * class0 class0=[1,2,3,4,5]
     * int int0=3
     * int int1=2
     * output: 3
     * ret0  ret0=[1,2,3]
     * ret1  ret1=[2,3]
     * ret2  ret2=[2,3]
     */
    static func prefix_suffix_init1(){
        var class0=[1,2,3,4,5];
        var int0=3;
        var int1=2;
        var ret0=class0.prefix(upTo:int0);
        var ret1=ret0.sufix(int1);
        NSarray ret2=init[ret1,copyItems Yes]
        assert (class0==[1,2,3,4,5]);
        assert (ret0==[1,2,3]);
        assert (ret1==[2,3]);
        assert (ret2==[2,3]);
        print(ret2);
      }
}
Arrays_prefix_Arrays$Arrays_suffix_Arrays$convenience init.prefix_suffix_init0()
Arrays_prefix_Arrays$Arrays_suffix_Arrays$convenience init.prefix_suffix_init1()
